/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oncallvirtual;

import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.TimeUnit;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author NA002456
 */
public class JF_oncall extends javax.swing.JFrame {

    private final ArrayList<Chatter> chatters;
    private final Map<String, TreeMap<String, Integer>> tsitios;
    private final ArrayList<String> tciudades;
    private final ArrayList<String> tprovincias;
    private final ArrayList<String> trncs;
    private final Cliente_Telegram tcliente;
    private final String jpg_unit;
    private final sqls sql;
    private Astellia astellia;

    Thread telegram_server;

    /**
     * Creates new form JF_oncall
     */
    public JF_oncall() {
        initComponents();
        sql = new sqls();
        chatters = new ArrayList();
        tsitios = sql.carga_lista_sitios();
        tciudades = sql.carga_lista_ciudades();
        tprovincias = sql.carga_lista_provincias();
        trncs = sql.carga_lista_rncs();
        tcliente = new Cliente_Telegram();
        astellia = new Astellia();
        jpg_unit = "E"; //qualibot 
//        jpg_unit = "D"; //laptop
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jB_threads = new javax.swing.JButton();
        jB_init = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Oncall Virtual 1.0.12");

        jB_threads.setText("Theads");
        jB_threads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_threadsActionPerformed(evt);
            }
        });

        jB_init.setText("Iniciar Oncall");
        jB_init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_initActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jB_threads)
                .addGap(18, 18, 18)
                .addComponent(jB_init)
                .addContainerGap(212, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_threads)
                    .addComponent(jB_init))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_threadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_threadsActionPerformed
        System.out.println(Thread.activeCount());
    }//GEN-LAST:event_jB_threadsActionPerformed

    private void jB_initActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_initActionPerformed
        jB_init.setEnabled(false);
        if (telegram_server != null) {
            if (telegram_server.isAlive()) {
                return;
            }
        }

        telegram_server = new Thread(new Runnable() {
            ServerSocket providerSocket = null;
            int puerto;
            Socket connection = null;

            public void run() {
                try {
                    //1. creating a server socket
                    puerto = 4445;
                    providerSocket = new ServerSocket(puerto, 10);

                    while (true) {
                        //2. Wait for connection
                        System.out.println("Waiting for connection");
                        connection = providerSocket.accept();

                        Thread t = new Thread(new ChatSocket(connection));
                        t.start();
                    }
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                } finally {
                    //4: Closing connection
                    try {
                        providerSocket.close();
                    } catch (IOException ioException) {
                        ioException.printStackTrace();
                    }
                }
            }
        });
        telegram_server.start();
    }//GEN-LAST:event_jB_initActionPerformed

    class ChatSocket implements Runnable {

        Socket chatsocket;
        ObjectInputStream chat_in;
        ObjectOutputStream chat_out;
        String chat_message;

        public ChatSocket(Socket f_chatsocket) {
            chatsocket = f_chatsocket;
        }

        public void run() {
            try {
                System.out.println("Connection received from " + chatsocket.getInetAddress().getHostName() + " in port " + chatsocket.getPort());

                try {
                    // 20 second timeout
                    chatsocket.setSoTimeout(20000);
                } catch (SocketException ex) {

                }

                //3. get Input and Output streams
                chat_out = new ObjectOutputStream(chatsocket.getOutputStream());
                chat_out.flush();
                chat_in = new ObjectInputStream(chatsocket.getInputStream());

                sendMessage("Connection successful", chat_out);

                //4. The two parts communicate via the input and output streams
                try {
                    chat_message = (String) chat_in.readObject();
                    System.out.println("server<" + chat_message);

                    ////////////////aqui se lee el mensaje
                    ArrayList<String> tlista = new ArrayList(Arrays.asList((chat_message.trim()).split(";")));
                    System.out.println("mensaje recibido: " + tlista);
                    if (tlista.size() == 3) {
                        String chat_name = tlista.get(0).trim();
                        String chat_text = tlista.get(1).trim().toLowerCase();
                        String chat_id = tlista.get(2).trim();
                        int chatter_index = chatters.indexOf(new Chatter(chat_name, "", ""));
                        System.out.println("chatter: " + chatter_index);

                        if (chatter_index == -1) {
                            if (chat_text.compareTo("hola") == 0) {
                                chatters.add(new Chatter(chat_name, chat_text, chat_id));
                                tcliente.send_telegram(chat_name, "Escoja una opcion:\n1 KPIs x sitio\n2 KPIs x ciudad\n3 KPIs x provincia\n4 KPIs x RNC");
                            }
                        } else {
                            Chatter chatter = chatters.get(chatter_index);
                            chatter.chatterchattext = chat_text;
                            chatter.chatterchatid = chat_id;

                            String error_message = "";
                            boolean is_error_message = false;
                            String t_message = "";

                            //seleccion fija sin error if elseif
                            switch (chatter.chatterstatlevel) {
                                case 0:
                                    //seleccion fija con error if elseif else
                                    if (chatter.chatterchattext.compareTo("1") == 0
                                            || chatter.chatterchattext.compareTo("2") == 0
                                            || chatter.chatterchattext.compareTo("3") == 0
                                            || chatter.chatterchattext.compareTo("4") == 0) {
                                        chatter.chatterstats[0] = Integer.parseInt(chatter.chatterchattext);
                                        chatter.chatterstatlevel = 1;
                                    } else if (chatter.chatterchattext.compareTo("8") == 0) {
                                        String bases_response = astellia.getbases_ava();
                                        if (bases_response.contains("Bases no disponibles")) {
                                            chatter.chatterstatlevel = 0;
                                        } else {
                                            chatter.chatterstats[0] = 8;
                                            chatter.chatterstatlevel = 1;
                                        }
                                        tcliente.send_telegram(chat_name, bases_response);
                                    } else if (chatter.chatterchattext.compareTo("9") == 0) {
                                        chatter.chatterstats[0] = 9;
                                        chatter.chatterstatlevel = 1;
                                    } else {
                                        error_message = "Selección incorrecta!!!";
                                        is_error_message = true;
                                    }
                                    break;
                                case 1:
                                    if (chatter.chatterstats[0] >= 1 && chatter.chatterstats[0] <= 4) {
                                        int min_response_chars = 0;
                                        if (chatter.chatterstats[0] >= 1 && chatter.chatterstats[0] <= 3) {
                                            min_response_chars = 2;
                                        } else if (chatter.chatterstats[0] == 4) {
                                            min_response_chars = 0;
                                        }
                                        //validacion por tamaño if else
                                        if (chatter.chatterchattext.length() > min_response_chars) {
                                            chatter.chattersitesmap.clear();
                                            t_message = "Escoja:";
                                            int tsitio_index = 1;
                                            switch (chatter.chatterstats[0]) {
                                                case 1:
                                                    for (String tsitio : tsitios.keySet()) {
                                                        if (tsitio.contains(chatter.chatterchattext.toUpperCase())) {
                                                            chatter.chattersitesmap.put(tsitio_index, tsitio);
                                                            t_message += "\n" + tsitio_index + " " + tsitio;
                                                            tsitio_index++;
                                                        }
                                                    }
                                                    break;
                                                case 2:
                                                    for (String tciudad : tciudades) {
                                                        if (tciudad.contains(chatter.chatterchattext.toLowerCase())) {
                                                            chatter.chattersitesmap.put(tsitio_index, tciudad);
                                                            t_message += "\n" + tsitio_index + " " + tciudad;
                                                            tsitio_index++;
                                                        }
                                                    }
                                                    break;
                                                case 3:
                                                    for (String tprovincia : tprovincias) {
                                                        if (tprovincia.contains(chatter.chatterchattext.toLowerCase())) {
                                                            chatter.chattersitesmap.put(tsitio_index, tprovincia);
                                                            t_message += "\n" + tsitio_index + " " + tprovincia;
                                                            tsitio_index++;
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    for (String trnc : trncs) {
                                                        if (trnc.contains(chatter.chatterchattext.toLowerCase())) {
                                                            chatter.chattersitesmap.put(tsitio_index, trnc);
                                                            t_message += "\n" + tsitio_index + " " + trnc;
                                                            tsitio_index++;
                                                        }
                                                    }
                                                    break;
                                            }

                                            if (chatter.chattersitesmap.isEmpty()) {
                                                error_message = "No se encontro!!!";
                                                is_error_message = true;
                                            } else {
                                                chatter.chatterstatlevel = 2;
                                            }
                                        } else {
                                            error_message = "Debe ingresar mas de 2 caracteres de busqueda!!!";
                                            is_error_message = true;
                                        }
                                    } else if (chatter.chatterstats[0] == 8) {
                                        tcliente.send_telegram(chat_name, astellia.query_bases(chatter.chatterchattext));
                                        chatter.chatterstatlevel = 0;
                                    } else if (chatter.chatterstats[0] == 9) {
                                        tcliente.send_telegram(chat_name, (new MME_query()).query_imsi_mme(chatter.chatterchattext));
                                        chatter.chatterstatlevel = 0;
                                    }
                                    break;
                                case 2:
                                    if (chatter.chatterstats[0] >= 1 && chatter.chatterstats[0] <= 4) {
                                        if (chatter.chatterchattext.trim().chars().allMatch(Character::isDigit)) {
                                            int opcion_escogida_index = Integer.parseInt(chatter.chatterchattext.trim());
                                            String opcion_escogida_text = chatter.chattersitesmap.get(opcion_escogida_index);
                                            if (opcion_escogida_text != null) {
                                                tcliente.send_telegram(chat_name, "Enviando estadistica de " + opcion_escogida_text + ", espere...");
                                                System.out.println("Enviar estadistica de " + opcion_escogida_text);
                                                String queryopts = "";
                                                if (chatter.chatterstats[0] == 1) {
                                                    TreeMap<String, Integer> tsectores = tsitios.get(opcion_escogida_text);
                                                    boolean notfirst_netactid = false;
                                                    for (Map.Entry<String, Integer> entry : tsectores.entrySet()) {
                                                        queryopts += (notfirst_netactid ? "," : "") + entry.getValue();
                                                        notfirst_netactid = true;
                                                    }
                                                } else if (chatter.chatterstats[0] >= 2 && chatter.chatterstats[0] <= 4) {
                                                    queryopts = opcion_escogida_text;
                                                }
                                                System.out.println("sectors found: " + queryopts);
                                                ArrayList<qregister3g> f_kpis3g = sql.get_kpis3g(queryopts, chatter.chatterstats[0]);
                                                System.out.println("raw data 3g: " + f_kpis3g.size());
                                                ArrayList<qregister4g> f_kpis4g = sql.get_kpis4g(queryopts, chatter.chatterstats[0]);
                                                System.out.println("raw data 4g: " + f_kpis4g.size());
                                                if (!f_kpis3g.isEmpty()) {
                                                    send_kpis3g(chat_name, f_kpis3g, 0, "Eficiencia Voz 3G", "Porcentaje");
                                                    send_kpis3g(chat_name, f_kpis3g, 1, "Eficiencia Datos 3G", "Porcentaje");
                                                    send_kpis3g(chat_name, f_kpis3g, 2, "Usuarios 3G", "Numero");
                                                    send_kpis3g(chat_name, f_kpis3g, 3, "RTWP 3G", "dBm");
                                                    send_kpis3g(chat_name, f_kpis3g, 4, "Trafico Voz 3G", "Erlang");
                                                    send_kpis3g(chat_name, f_kpis3g, 5, "Trafico Datos 3G", "MBytes");
                                                    send_kpis3g(chat_name, f_kpis3g, 6, "Frame Loss 3G", "Numero");
                                                    send_kpis3g(chat_name, f_kpis3g, 7, "Disponibilidad 3G", "Porcentaje");
                                                }
                                                if (!f_kpis4g.isEmpty()) {
                                                    send_kpis4g(chat_name, f_kpis4g, 0, "Eficiencia Datos 4G", "Porcentaje");
                                                    send_kpis4g(chat_name, f_kpis4g, 1, "Usuarios 4G", "Numero");
                                                    send_kpis4g(chat_name, f_kpis4g, 2, "Trafico Datos 4G", "MBytes");
                                                    send_kpis4g(chat_name, f_kpis4g, 3, "Disponibilidad 4G", "Porcentaje");
                                                }
                                                try {
                                                    Thread.sleep(5000);
                                                } catch (Exception e) {
                                                }
                                                chatter.chatterstatlevel = 0;
                                            }
                                        }
                                    }
                                    break;
                                default:
                                    break;
                            }

                            /////////////////////
                            if (is_error_message) {
                                tcliente.send_telegram(chat_name, error_message);
                            }

                            switch (chatter.chatterstatlevel) {
                                case 0:
                                    tcliente.send_telegram(chat_name, "Escoja una opcion:\n1 KPIs x sitio\n2 KPIs x ciudad\n3 KPIs x provincia\n4 KPIs x RNC");
                                    break;
                                case 1:
                                    if (chatter.chatterstats[0] >= 1 && chatter.chatterstats[0] <= 4) {
                                        String l1_elemento = "";
                                        switch (chatter.chatterstats[0]) {
                                            case 1:
                                                l1_elemento = "sitio";
                                                break;
                                            case 2:
                                                l1_elemento = "ciudad";
                                                break;
                                            case 3:
                                                l1_elemento = "provincia";
                                                break;
                                            case 4:
                                                l1_elemento = "RNC";
                                                break;
                                        }
                                        tcliente.send_telegram(chat_name, "Buscar " + l1_elemento + " (3 char min):");
                                    } else if (chatter.chatterstats[0] == 8) {
                                        tcliente.send_telegram(chat_name, "Ingrese imsi");
                                    } else if (chatter.chatterstats[0] == 9) {
                                        tcliente.send_telegram(chat_name, "Ingrese min o codigo:");
                                    }
                                    break;
                                case 2:
                                    if (chatter.chatterstats[0] >= 1 && chatter.chatterstats[0] <= 4) {
                                        tcliente.send_telegram(chat_name, t_message);
                                    }
                                    break;
                                default:
                                    break;
                            }

                        }
                    }
                    if (tlista.size() == 2) {
                        if (tlista.get(0).compareTo("borra") == 0 && tlista.get(1).compareTo("chatter") == 0) {
                            for (Chatter chatter : chatters) {
                                tcliente.send_telegram(chatter.chattername, "Sesion cerrada");
                            }
                            chatters.clear();
                        }
                    }
                } catch (ClassNotFoundException classnot) {
                    System.err.println("Data received in unknown format");
                }

                sendMessage("Data recieved", chat_out);

            } catch (IOException ex) {

            } finally {
                //4: Closing connection
                try {
                    chat_in.close();
                    chat_out.close();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        }
    }

    private void sendMessage(String msg, ObjectOutputStream f_chat_out) {
        try {
            f_chat_out.writeObject(msg);
            f_chat_out.flush();
            System.out.println("server>" + msg);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    private void send_kpis3g(String f_chat_name, ArrayList<qregister3g> f_kpis, int f_kpitipo, String f_title, String f_units) {
        Map<String, TreeMap<Date, Float>> arranged_kpis = new HashMap();
        for (qregister3g f_kpi : f_kpis) {
            if (!arranged_kpis.containsKey(f_kpi.name)) {
                TreeMap<Date, Float> arranged_hours = new TreeMap();
                arranged_kpis.put(f_kpi.name, arranged_hours);
            }
            switch (f_kpitipo) {
                case 0:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.efi_voz);
                    break;
                case 1:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.efi_datos);
                    break;
                case 2:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.hs_user);
                    break;
                case 3:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.rtwp);
                    break;
                case 4:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.voz_erl);
                    break;
                case 5:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.datos_mb);
                    break;
                case 6:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.frame_loss);
                    break;
                case 7:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.disponibilidad);
                    break;
            }
        }
        System.out.println("sectors arrenged: " + arranged_kpis.size());

        final XYDataset dataset = createDataset(arranged_kpis);
        final JFreeChart chart = createChart(dataset, f_title, f_units);

        int width = 1000;
        /* Width of the image */
        int height = 480;
        /* Height of the image */
        String filename = (new SimpleDateFormat("yyMMddHHmmss")).format(new Date());
        File lineChart = new File(jpg_unit + ":\\imag\\" + filename + ".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(lineChart, chart, width, height);
        } catch (IOException ex) {
            System.out.println("Error creando jpg: " + ex.getMessage());
        }

        tcliente.send_telegram(f_chat_name, jpg_unit + ":\\imag\\" + filename + ".jpeg" + ";photo");
    }

    private void send_kpis4g(String f_chat_name, ArrayList<qregister4g> f_kpis, int f_kpitipo, String f_title, String f_units) {
        Map<String, TreeMap<Date, Float>> arranged_kpis = new HashMap();
        for (qregister4g f_kpi : f_kpis) {
            if (!arranged_kpis.containsKey(f_kpi.name)) {
                TreeMap<Date, Float> arranged_hours = new TreeMap();
                arranged_kpis.put(f_kpi.name, arranged_hours);
            }
            switch (f_kpitipo) {
                case 0:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.efi_datos);
                    break;
                case 1:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.users);
                    break;
                case 2:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.datos_mb);
                    break;
                case 3:
                    arranged_kpis.get(f_kpi.name).put(f_kpi.fecha, f_kpi.disponibilidad);
                    break;
            }
        }
        System.out.println("sectors arrenged: " + arranged_kpis.size());

        final XYDataset dataset = createDataset(arranged_kpis);
        final JFreeChart chart = createChart(dataset, f_title, f_units);

        int width = 1000;
        /* Width of the image */
        int height = 480;
        /* Height of the image */
        String filename = (new SimpleDateFormat("yyMMddHHmmss")).format(new Date());
        File lineChart = new File(jpg_unit + ":\\imag\\" + filename + ".jpeg");
        try {
            ChartUtilities.saveChartAsJPEG(lineChart, chart, width, height);
        } catch (IOException ex) {
            System.out.println("Error creando jpg: " + ex.getMessage());
        }

        tcliente.send_telegram(f_chat_name, jpg_unit + ":\\imag\\" + filename + ".jpeg" + ";photo");
    }

    private XYDataset createDataset(Map<String, TreeMap<Date, Float>> f_arranged_kpis) {
        TimeSeriesCollection acollection = new TimeSeriesCollection();

        for (Map.Entry<String, TreeMap<Date, Float>> entry : f_arranged_kpis.entrySet()) {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
            String asector = entry.getKey();
            TimeSeries aserie = new TimeSeries(asector);
            TreeMap<Date, Float> akpi = entry.getValue();
            List<Date> datelist = new ArrayList(akpi.keySet());
            Date min_date = datelist.get(0);
            Date max_date = datelist.get(datelist.size() - 1);
            System.out.println("Min date = " + min_date + ", max_date = " + max_date);
            Minute ahora = new Minute(max_date);
            Hour ahorahora = ahora.getHour();
            System.out.println("Hora inicio plot: " + ahorahora.getYear() + " " + ahorahora.getMonth() + " " + ahorahora.getDayOfMonth() + " " + ahorahora.getHour() + ahora.getMinute());

            for (int i = 0; i < TimeUnit.MINUTES.convert((max_date.getTime() - min_date.getTime()), TimeUnit.MILLISECONDS); i++) {
                Date fecha_plot = getDate(ahorahora.getYear(), ahorahora.getMonth() - 1, ahorahora.getDayOfMonth(), ahorahora.getHour(), ahora.getMinute());
//                System.out.println("Hora plot: " + fecha_plot);
                if (akpi.containsKey(fecha_plot)) {
                    aserie.add(ahora, akpi.get(fecha_plot));
                }
                ahora = (Minute) ahora.previous();
                ahorahora = ahora.getHour();
            }
            acollection.addSeries(aserie);
        }
        return acollection;
    }

    public Date getDate(int year, int month, int day, int hour, int minute) {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month);
        cal.set(Calendar.DAY_OF_MONTH, day);
        cal.set(Calendar.HOUR_OF_DAY, hour);
        cal.set(Calendar.MINUTE, minute);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        return cal.getTime();
    }

    private JFreeChart createChart(final XYDataset dataset, String f_title, String f_units) {
        return ChartFactory.createTimeSeriesChart(
                f_title,
                "Horas",
                f_units,
                dataset,
                true,
                false,
                false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_init;
    private javax.swing.JButton jB_threads;
    // End of variables declaration//GEN-END:variables
}
